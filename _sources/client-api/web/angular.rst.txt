Angular
=======

.. raw:: html
   
   <a href="https://www.npmjs.com/package/@alan-ai/alan-sdk-web">
   <img src="https://img.shields.io/npm/v/@alan-ai/alan-sdk-web.svg" align="left" style="border:inherit; padding-right:10px" /></a>

   <a href="https://github.com/alan-ai/alan-sdk-web/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-web" align="left" style="border:inherit"/></a>
   
   <br/>

Integrating with Alan AI
------------------------

To integrate an Angular app with Alan AI:

1. Add the Alan AI Web SDK to your app. You can do it in two ways: 

   - With the npm package 
   - In the browser library mode
   
   .. tabbed:: NPM package

      To install the Alan Web SDK with the npm package:
	  
      a. In the Terminal, run the command:

         .. code-block::
            :caption: Terminal

            npm install @alan-ai/alan-sdk-web --save

      b. Import ``alanBtn`` to your Angular component:

         .. code-block:: js
            :caption: Client app

            import alanBtn from "@alan-ai/alan-sdk-web";
			 

   .. tabbed:: Browser library mode
   
      To load the Alan AI Web SDK in the browser library mode, add the ``alan_lib.min.js`` library to the ``index.html`` file using the ``<script>`` tag:

      .. code-block:: html
         :caption: Client app

         <script type="text/javascript" src="https://studio.alan.app/web/lib/alan_lib.min.js"></script>

2. Add the Alan AI button to your component:

   .. code-block:: typescript
      :caption: Client app

      export class AppComponent {

        alanBtnInstance;

        constructor(){
          this.alanBtnInstance = alanBtn({
            key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
            onCommand: (commandData) => {
              if (commandData.command === 'go:back') {
                // Call the client code that will react to the received command
              }
            },
          });
        }
      }

.. note::
	  
   Regularly update the ``@alan-ai/alan-sdk-web`` package your project depends on. To check if a newer version is available, run ``npm outdated``. To update the alan package, run ``npm update @alan-ai/alan-sdk-web``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.
   

Specifying the Alan AI button parameters
----------------------------------------

.. include:: ../snippets/button-parameters-web.rst

Changing the Alan AI button position
------------------------------------

.. include:: ../snippets/button-position-web.rst
   
Using client API methods
------------------------

You can use the following :doc:`client API methods <../methods/common-api>` in your Angular app:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `sendText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_
-  `remove()`_
- `textChat.isAudioOutputEnabled()`_
- `textChat.setAudioOutputEnabled()`_

setVisualState()
~~~~~~~~~~~~~~~~

Use the ``setVisualState()`` method to inform the AI assistant about the appâ€™s visual context. For details, see :ref:`setVisualState() <setVisualState()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public setVisualState() {
       this.alanBtnInstance.setVisualState({data: "your data"});
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="setVisualState()">
       <span>Set visual state</span>
     </a>
   </div>
   
callProjectApi()
~~~~~~~~~~~~~~~~

Use the ``callProjectApi()`` method to send data from the client app to the dialog script and trigger activities without voice and text commands. For details, see :ref:`callProjectApi() <callProjectApi()>`.

.. code-block:: alan
   :caption: Dialog script

   projectAPI.setClientData = function(p, param, callback) {
     console.log(param);
   };

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public callProjectApi() {
       this.alanBtnInstance.callProjectApi("setClientData", {value:"your data"}, function (error, result){
         // handle error and result here
       });
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="callProjectApi()">
       <span>Call setClientData method</span>
     </a>
   </div>
   
playText()
~~~~~~~~~~

Use the ``playText()`` method to play specific text in the client app. For details, see :ref:`playText() <playText()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public playText() {
       this.alanBtnInstance.playText("Hello, I am Alan!");
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="playText()">
       <span>Play text</span>
     </a>
   </div>
   

sendText()
~~~~~~~~~~

Use the ``sendText()`` method to send a text message to Alan as the user's input. For details, see :ref:`sendText() <sendText()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public sendText() {
       this.alanBtnInstance.sendText("Hello Alan, can you help me?");
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="sendText()">
       <span>Send text</span>
     </a>
   </div>
   
playCommand()
~~~~~~~~~~~~~

Use the ``playCommand()`` method to execute a specific command in the client app. For details, see :ref:`playCommand() <playCommand()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
         onCommand: (commandData: any) => {
           if (commandData.command === 'goBack') {
             // Call client code that will react to the received command
           }
         },
       });
     }
	
     public playCommand() {
       this.alanBtnInstance.playCommand({command: "goBack"});
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="playCommand()">
       <span>Play command</span>
     </a>
   </div>


   
   
activate()
~~~~~~~~~~

Use the ``activate()`` method to activate the Alan AI button programmatically. For details, see :ref:`activate() <activate()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public activateButton() {
       this.alanBtnInstance.activate();
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="activateButton()">
       <span>Activate Alan AI button</span>
     </a>
   </div>
   
deactivate()
~~~~~~~~~~~~

Use the ``deactivate()`` method to deactivate the Alan AI button programmatically. For details, see :ref:`deactivate() <deactivate()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public deactivateButton() {
       this.alanBtnInstance.deactivate();
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="deactivateButton()">
       <span>Deactivate Alan AI button</span>
     </a>
   </div>

   
isActive()
~~~~~~~~~~

Use the ``isActive()`` method to check the Alan AI button state: active or not. For details, see :ref:`isActive() <isActive()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public isActive() {
       console.log("The button is active: " + this.alanBtnInstance.isActive());
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="isActive()">
       <span>Check button state</span>
     </a>
   </div>


   
   
remove()
~~~~~~~~

Use the ``remove()`` method to remove the Alan AI button from the parent element. For details, see :ref:`remove() <remove()>`.

.. code-block:: coffeescript
   :caption: app.component.ts
   
   export class AppComponent {
 
     alanBtnInstance;

     constructor(){
       this.alanBtnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }
	
     public removeButton() {
       this.alanBtnInstance.remove();
     }
   }
   
.. code-block::
   :caption: app.component.html
   
   <div>
     <a class="card" (click)="removeButton()">
       <span>Remove Alan AI button</span>
     </a>
   </div>
   
   
textChat.isAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.isAudioOutputEnabled()`` method to get the state of audio output for the Alan AI Chat. For details, see :ref:`textChat.isAudioOutputEnabled() <textChat.isAudioOutputEnabled()>`.

.. include:: ../snippets/get-audio-web.rst

textChat.setAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.setAudioOutputEnabled()`` method to enable or disable audio output for the Alan AI Chat. For details, see :ref:`textChat.setAudioOutputEnabled() <textChat.setAudioOutputEnabled()>`.

.. include:: ../snippets/set-audio-web.rst


Using handlers
--------------

You can use the following :doc:`Alan AI handlers <../methods/handlers>` in your Angular app:

-  `onCommand handler`_
-  `onButtonState handler`_
-  `onConnectionStatus handler`_
-  `onEvent handler`_

onCommand handler
~~~~~~~~~~~~~~~~~

Use the ``onCommand`` handler to :ref:`handle commands sent from the dialog script <Sending commands to the app>`. For details, see :doc:`onCommand handler <../methods/command-handler>`.

.. code-block:: coffeescript
   :caption: Client app
   
   this.alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
     onCommand: (commandData: any) => {
       if (commandData.command === 'go:back') {
         // Call client code that will react to the received command
       }
     },
   });

onButtonState handler
~~~~~~~~~~~~~~~~~~~~~

Use the ``onButtonState`` handler to capture and handle the Alan AI button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

.. code-block:: coffeescript
   :caption: Client app
   
   this.alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
     onButtonState: function (e) {
       console.info('onButtonState', e);
     },
   });

onConnectionStatus handler
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``onConnectionStatus`` handler to capture and handle the connection status for the virtual assistant project. For details, see :doc:`onConnectionStatus handler <../methods/connection-handler>`.

.. code-block:: coffeescript
   :caption: Client app
   
   this.alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
     onConnectionStatus: function(status) {
       console.log("The status is " + status);
     },
   });

onEvent handler
~~~~~~~~~~~~~~~

Use the ``onEvent`` handler to capture and handle events emitted by Alan AI: get user's utterances, assistant responses and so on. For details, see :doc:`onEvent handler <../methods/event-handler>`.

.. code-block:: coffeescript
   :caption: Client app
   
   this.alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
     onEvent: function (e) {
       console.info('onEvent', e);
     },
   });
   
   
What's next?
------------

.. panels::
   :column: col-lg-12 col-md-12 col-sm-12 col-xs-12 p-2
   
   ---
   :card: border-0 + custom-style-blue
   
   .. image:: /_static/assets/img/about/git-purple.svg
   
   .. raw:: html
	 
	  <p style="font-size: 20px; font-weight: 700;">Example apps</p>
	  <p>Find and explore examples of voice-enabled apps on the <a href="https://github.com/alan-ai" target="_blank">Alan AI GitHub repository.</p>
	  
   .. link-button:: https://github.com/alan-ai/alan-sdk-web/tree/master/examples/
        :type: url
        :text: View on GitHub
        :classes: btn-outline-primary


.. raw:: html

   <div id="purple-background"></div>


