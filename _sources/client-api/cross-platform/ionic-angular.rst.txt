Ionic Angular
=============

**Available on**: :badge:`Web platform,badge-primary` :badge:`Android,badge-danger` :badge:`iOS,badge-danger`

Integrating with Alan AI
------------------------

To integrate an Ionic Angular app with Alan AI, you need to do the following:

1. `Create an Ionic Angular app <#step-1-create-an-ionic-angular-app>`__
2. `Install Alan AI packages <#step-2-install-alan-ai-packages>`__
3. `Add the Alan AI button <#step-3-add-the-alan-ai-button>`__

Step 1. Create an Ionic Angular app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to create a voice-enabled app from scratch, in the Terminal, run the following commands. Otherwise move on to `step 2 <#step-2-install-alan-packages>`__.

.. code-block::
   :caption: Terminal

   npm install -g ionic
   cd <appFolder>
   ionic start <appName> <template> [options]

For details, see `Ionic documentation <https://ionicframework.com/docs/cli/commands/start>`__.

Step 2. Install Alan AI packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need to install the Alan AI SDK Cordova component and Alan AI Web Component package.

1. Navigate to the folder where your app resides:

   .. code-block::
      :caption: Terminal

      cd appName

2. Install the Alan AI SDK Cordova component:
   
   .. code-block::
	  :caption: Terminal
	  
	  npm install @alan-ai/cordova-plugin-alan-voice --save
		  
3. Install the Alan AI Web Component package:

   .. code-block::
      :caption: Terminal
	      
      npm install @alan-ai/alan-button --save

.. note::

   To be able to run Ionic apps on mobile devices, you must install the Alan AI button as the :doc:`Web Component <../web/web-component>` using the following packages: ``@alan-ai/alan-button`` and ``@alan-ai/cordova-plugin-alan-voice``. Do not use the ``@alan-ai/alan-sdk-web`` package: it is intended for non cross-platform web apps and pages.
   

Step 3. Add the Alan AI button
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To add the Alan AI button to your app:

1. Enable usage of custom HTML tags with AngularJS in the app. Include ``CUSTOM_ELEMENTS_SCHEMA`` in all modules where you will use custom elements:

   .. code-block:: typescript
      :caption: app.module.ts

      import {CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';

      @NgModule({
        schemas: [CUSTOM_ELEMENTS_SCHEMA],
      })
      export class AppModule {}

   `see full source <../../../_static/assets/img/ionic/app.module.ts.txt>`__

2. Register the Alan AI Web Component. In ``main.ts``, import the ``@alan-button`` component and call the ``defineCustomElements(window)`` method:

   .. code-block:: typescript
      :caption: main.ts

      import {defineCustomElements as alanBtnDefineCustomElements} from '@alan-ai/alan-button/dist/loader';
            
      alanBtnDefineCustomElements(window);

   `see full source <../../../_static/assets/img/ionic/main.ts.txt>`__

3. Add the Alan AI button HTML tag to the main app’s template. Open ``app.component.html`` and add the following tag:

   .. code-block:: 
      :caption: app.component.html

      <ion-app>
        <ion-router-outlet></ion-router-outlet>
        <alan-button #alanBtnEl alan-key="YOUR_KEY_FROM_ALAN_STUDIO_HERE"></alan-button>
      </ion-app>

4. In the Alan AI button HTML tag, replace ``YOUR_KEY_FROM_ALAN_STUDIO_HERE`` with the Alan AI SDK key for your Alan AI Studio project. To get the key, in Alan AI Studio, at the top of the code editor, click **Integrations** and copy the value from the **Alan SDK Key** field.

   .. code-block:: 
      :caption: app.component.html

      <ion-app>
        <ion-router-outlet></ion-router-outlet>
        <alan-button #alanBtnEl alan-key="ff4f9c03e405a5a07d43485dbc3cb44a2e956eca572e1d8b807a3e2338fdd0dc/prod"></alan-button>
      </ion-app>

5. In the ``src/app`` folder, in ``app.component.ts``, add the import statement for the Alan button Web Component:

   .. code-block::
      :caption: app.component.ts

      import "@alan-ai/alan-button";

6. In the ``AppComponent`` class, use ``@ViewChild`` to add a reference to the Alan AI button element:

   .. code-block:: typescript
      :caption: app.component.ts

      @ViewChild('alanBtnEl', {static:false}) alanBtnComponent: ElementRef<HTMLAlanButtonElement>;

7. Replace the first import statement with the following one:

   .. code-block:: typescript
      :caption: app.component.ts

      import { Component, ElementRef, ViewChild } from '@angular/core';

8. In the ``AppComponent`` class, in the ``ngAfterViewInit()`` method, add a listener for the ``command`` event. All commands sent from the dialog script will be passed to this method. It’s a place where you can set up logic on how the app will react to commands from the dialog script.

   .. code-block:: typescript
      :caption: app.component.ts

      ngAfterViewInit() {
        this.alanBtnComponent.nativeElement.addEventListener('command', (data) => {
          const commandData = (<CustomEvent>data).detail;

          if (commandData.command === 'navigation') {
            /* Call client code that will react to the received command */
          }
        });
      }

   `see full source <../../../_static/assets/img/ionic/app.component.ts.txt>`__

That's it. You can now add voice commands to the script in Alan AI Studio, run the app, click the Alan AI button and interact with the app with voice.
   
.. note::
	  
   Regularly update the Alan AI packages your project depends on. To check if a newer version is available, run ``npm outdated``. To update the package, run ``npm update <alan-package-name>``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.
   
Specifying the Alan AI button parameters
----------------------------------------

.. include:: ../snippets/button-parameters-ionic.rst

Using client API methods
------------------------

You can use the following :doc:`client API methods <../methods/common-api>` in your app:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `sendText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_
-  `remove()`_
-  `getWakewordEnabled()`_
-  `setWakewordEnabled()`_

setVisualState()
~~~~~~~~~~~~~~~~

Use the ``setVisualState()`` method to inform the AI assistant about the app’s visual context. For details, see :ref:`setVisualState() <setVisualState()>`.

.. include:: ../snippets/visual-state-ionic-angular.rst
   
callProjectApi()
~~~~~~~~~~~~~~~~

Use the ``callProjectApi()`` method to send data from the client app to the dialog script and trigger activities without voice commands. For details, see :ref:`callProjectApi() <callProjectApi()>`.

.. code-block:: alan
   :caption: Dialog script

   projectAPI.myFunc = function(p, param, callback) {
     console.log(param);
   };

.. include:: ../snippets/project-api-ionic-angular.rst
   
playText()
~~~~~~~~~~

Use the ``playText()`` method to play specific text in the client app. For details, see :ref:`playText() <playText()>`.

.. include:: ../snippets/playtext-ionic-angular.rst


sendText()
~~~~~~~~~~

Use the ``sendText()`` method to send a text message to Alan AI as the user's input. For details, see :ref:`sendText() <sendText()>`.

.. include:: ../snippets/sendtext-ionic-angular.rst
   
playCommand()
~~~~~~~~~~~~~

Use the ``playCommand()`` method to execute a specific command in the client app. For details, see :ref:`playCommand() <playCommand()>`.

.. include:: ../snippets/playcommand-ionic-angular.rst
   
   
activate()
~~~~~~~~~~

Use the ``activate()`` method to activate the Alan AI button programmatically. For details, see :ref:`activate() <activate()>`.

.. include:: ../snippets/activate-ionic-angular.rst
   
deactivate()
~~~~~~~~~~~~

Use the ``deactivate()`` method to deactivate the Alan AI button programmatically. For details, see :ref:`deactivate() <deactivate()>`.

.. include:: ../snippets/deactivate-ionic-angular.rst
   
isActive()
~~~~~~~~~~

Use the ``isActive()`` method to check the Alan AI button state: active or not. For details, see :ref:`isActive() <isActive()>`.

.. include:: ../snippets/isactive-ionic-angular.rst
   
   
remove()
~~~~~~~~

Use the ``remove()`` method to remove the Alan AI button from the parent element. For details, see :ref:`remove() <remove()>`.

.. include:: ../snippets/remove-ionic-angular.rst

getWakewordEnabled()
~~~~~~~~~~~~~~~~~~~~

Use the ``getWakewordEnabled()`` method to check the state of the wake word for the Alan AI button. For details, see :ref:`getWakewordEnabled() <getWakewordEnabled()>`.

.. include:: ../snippets/getwakeword-ionic-angular.rst 
   
setWakewordEnabled()
~~~~~~~~~~~~~~~~~~~~

Use the ``setWakewordEnabled()`` method to enable or disable the wake word for the Alan AI button. For details, see :ref:`setWakewordEnabled() <setWakewordEnabled()>`.

.. include:: ../snippets/setwakeword-ionic-angular.rst


Using handlers
--------------

You can use the following :doc:`Alan AI handlers <../methods/handlers>` in your app:

-  `onCommand handler`_
-  `onButtonState handler`_
-  `onConnectionStatus handler`_
-  `onEvent handler`_

onCommand handler
~~~~~~~~~~~~~~~~~

Use the ``onCommand`` handler to :ref:`handle commands sent from the dialog script <Sending commands to the app>`. For details, see :doc:`onCommand handler <../methods/command-handler>`.

.. include:: ../snippets/command-handler-ionic-angular.rst

onButtonState handler
~~~~~~~~~~~~~~~~~~~~~

Use the ``onButtonState`` handler to capture and handle the Alan AI button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

.. include:: ../snippets/state-handler-ionic-angular.rst

onConnectionStatus handler
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``onConnectionStatus`` handler to capture and handle the connection status for the virtual assistant project. For details, see :doc:`onConnectionStatus handler <../methods/connection-handler>`.

.. include:: ../snippets/connection-handler-ionic-angular.rst

onEvent handler
~~~~~~~~~~~~~~~

Use the ``onEvent`` handler to capture and handle events emitted by Alan AI: get user's utterances, assistant responses and so on. For details, see :doc:`onEvent handler <../methods/event-handler>`.

.. include:: ../snippets/event-handler-ionic-angular.rst


What's next?
------------

.. panels::
   :column: col-lg-12 col-md-12 col-sm-12 col-xs-12 p-2
   
   ---
   :card: border-0 + custom-style-blue
   
   .. image:: /_static/assets/img/about/git-purple.svg
   
   .. raw:: html
	 
	  <p style="font-size: 20px; font-weight: 700;">Example apps</p>
	  <p>Find and explore examples of voice-enabled apps on the <a href="https://github.com/alan-ai" target="_blank">Alan AI GitHub repository.</p>
	  
   .. link-button:: https://github.com/alan-ai/alan-sdk-ionic/tree/master/examples
        :type: url
        :text: View on GitHub
        :classes: btn-outline-primary


.. raw:: html

   <div id="purple-background"></div>