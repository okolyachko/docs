Alan Android SDK
================

.. raw:: html

   <a href="https://github.com/alan-ai/alan-sdk-android/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-android" align="left" style="border:inherit; padding-right:10px"/></a>
   <br/>

Alan AI can be integrated with Android apps developed in Java and Kotlin. 

Integrating with Alan AI
------------------------

To add a conversational AI experience to an Android app, you need to do the following:

1. `Add the Alan AI SDK dependency <#step-1-add-the-alan-sdk-dependency>`__
2. `Add the Alan AI button to the app layout <#step-2-add-the-alan-button-to-the-app-layout>`__
3. `Add the AlanConfig object <#step-3-add-the-alanconfig-object>`__
4. `Connect to the Alan AI Studio project <#step-4-connect-to-the-alan-studio-project>`__


Step 1. Add the Alan AI SDK dependency
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need to add the Alan AI SDK dependency to the Android app. You can do it in two ways:

-  Add a reference as a Maven dependency
-  Download the aar package and include it manually

.. tabbed:: Maven dependency

   Do the following:

   1. Open the ``build.gradle`` file at the module level.
   2. In the ``dependencies`` block, add the dependency configuration for the Alan AI SDK for Android: ``implementation 'app.alan:sdk:<latest-version>'``. To get the latest version, check out the `Releases <https://github.com/alan-ai/alan-sdk-android/releases>`__ page for the `Alan AI Android SDK GitHub repository <https://github.com/alan-ai/alan-sdk-android>`__. 

   .. code-block:: java
      :caption: build.gradle (module level)

      dependencies {
        /// Add Alan AI SDK dependency
        implementation "app.alan:sdk:4.12.0"
      }

.. tabbed:: aar package 

   Do the following:

   1. Download the Alan AI SDK from the releases section in the Alan AI Git repository.

   2. Put it in your ``<project>/app/libs`` folder. Create the ``libs`` folder if needed.

   3. Open the ``build.gradle`` file at the module level.

   4. In the ``repositories`` block, add the name of the folder in which the aar package resides.

   5. In the ``dependencies`` block, add the dependency configuration for the Alan AI SDK for Android. To get the latest version, check out the `Releases <https://github.com/alan-ai/alan-sdk-android/releases>`__ page for the `Alan AI Android SDK GitHub repository <https://github.com/alan-ai/alan-sdk-android>`__. 


   .. code-block:: groovy
      :caption: build.gradle (module level)

      repositories {
        /// Add the following line to the repositories section
        flatDir {
          dirs 'libs'
        }
      }
      dependencies {
        /// Add the Alan AI SDK dependency
        implementation (name: 'AlanSdk-4.12.0', ext: 'aar')
      }

Step 2. Add the Alan AI button to the app layout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To add the Alan AI button to the layout of your app, use the ``AlanButton`` class. The ``AlanButton`` class provides a view with the voice button and instance methods to communicate with Alan Studio.

In ``activity_main.xml``, create a new ``AlanButton`` instance using the following XML layout:

.. code-block:: xml
   :caption: activity_main.xml

   <com.alan.alansdk.button.AlanButton
       android:id="@+id/alan_button"
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:layout_gravity="bottom"
       android:visibility="visible"
       app:button_horizontal_align="right"
       app:layout_constraintBottom_toBottomOf="parent"
       app:layout_constraintEnd_toEndOf="parent"/>

.. note:: 
   The ``layout_width`` param should be set to ``match_parent``.


Step 3. Add the AlanConfig object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need to add the ``AlanConfig`` object to your app. This object describes the parameters that are provided for ``AlanButton``. In the
``MainActivity.java`` file (for Android Java apps) or the ``MainActivity.kt`` file (for Android Kotlin apps), use ``AlanConfig.Builder`` to create a config with the necessary parameters:

+--------------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Name**     | **Type**             | **Description**                                                                                                                                                                                    |
+==============+======================+====================================================================================================================================================================================================+
| projectId    | String               | The Alan AI SDK key for a project in Alan AI Studio.                                                                                                                                               |
+--------------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| dialogId     | String               | (Optional) The dialog ID to connect to the necessary dialog.                                                                                                                                       |
+--------------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| dataObject   | String or JSONObject | (Optional) A valid JSON string or JSON object with authentication or configuration data to be sent to the dialog script. For details, see :doc:`authData <../../server-api/sending-data/authdata>`.|
+--------------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. tabbed:: Java

   .. code-block:: java
      :caption: MainActivity.java
      
      public class MainActivity extends AppCompatActivity {
	
        /// Add the alanButton variable
        private AlanButton alanButton;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.activity_main);
		
          /// Set up the Alan AI button
          AlanConfig config = AlanConfig.builder().setProjectId("").build();
          alanButton = findViewById(R.id.alan_button);
          alanButton.initWithConfig(config);
        }
      }

.. tabbed:: Kotlin

   .. code-block:: kotlin
      :caption: MainActivity.kt
   
      class MainActivity : AppCompatActivity() {
    
        /// Add the alanButton variable
        private var alanButton: AlanButton? = null

        override fun onCreate(savedInstanceState: Bundle?) {
          super.onCreate(savedInstanceState)
          setContentView(R.layout.activity_main)

          /// Set up the Alan AI button
          val config = AlanConfig.builder().setProjectId("").build()
          alanButton = findViewById(R.id.alan_button)
          alanButton?.initWithConfig(config)
        }
      }
    

Step 4. Connect to the Alan AI Studio project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As the last step, you need to connect the Android app to the Alan AI Studio project in which you create dialog scripts for the app. In
``setProjectId`` of ``MainActivity``, provide the Alan AI SDK Key for your project in Alan Studio. To get the key, in Alan AI Studio, at the top of the code editor click **Integrations** and copy the key value from the **Alan SDK Key** field.

.. tabbed:: Java

   .. code-block:: java
      :caption: MainActivity.java
      
      public class MainActivity extends AppCompatActivity {

        private AlanButton alanButton;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.activity_main);
		
          /// Define the project key
          AlanConfig config = AlanConfig.builder().setProjectId("e40fc04e9aff7b4b7d43485dbc3cb44a2e956eca572e1d8b807a3e2338fdd0dc/stage").build();
          alanButton = findViewById(R.id.alan_button);
          alanButton.initWithConfig(config);
        }
      }
   

.. tabbed:: Kotlin

   .. code-block:: kotlin
      :caption: MainActivity.kt
   
      class MainActivity : AppCompatActivity() {
    
        private var alanButton: AlanButton? = null

        override fun onCreate(savedInstanceState: Bundle?) {
          super.onCreate(savedInstanceState)
          setContentView(R.layout.activity_main)

          /// Define the project key
          val config = AlanConfig.builder().setProjectId("e40fc04e9aff7b4b7d43485dbc3cb44a2e956eca572e1d8b807a3e2338fdd0dc/stage").build()
          alanButton = findViewById(R.id.alan_button)
          alanButton?.initWithConfig(config)
        }
      }


Your app is now integrated with Alan AI. You can now add voice commands to the script in Alan AI Studio, run the app, tap the Alan AI button and interact with the app with voice.

Using client API methods
------------------------

You can use the following :doc:`client API methods <../methods/common-api>` in your app:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `sendText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_
-  `getWakewordEnabled()`_
-  `setWakewordEnabled()`_

setVisualState()
~~~~~~~~~~~~~~~~

Use the ``setVisualState()`` method to inform the AI assistant about the appâ€™s visual context. For details, see :ref:`setVisualState() <setVisualState()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/visual-state-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/visual-state-java.rst
   
callProjectApi()
~~~~~~~~~~~~~~~~

Use the ``callProjectApi()`` method to send data from the client app to the dialog script and trigger activities without voice commands. For details, see :ref:`callProjectApi() <callProjectApi()>`.

.. code-block:: alan
   :caption: Dialog script

   projectAPI.setClientData = function(p, param, callback) {
     console.log(param);
   };
    
.. tabbed:: Kotlin

   .. include:: ../snippets/project-api-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/project-api-java.rst
   
playText()
~~~~~~~~~~

Use the ``playText()`` method to play specific text in the client app. For details, see :ref:`playText() <playText()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/playtext-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/playtext-java.rst


sendText()
~~~~~~~~~~

Use the ``sendText()`` method to send a text message to Alan AI as the user's input. For details, see :ref:`sendText() <sendText()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/sendtext-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/sendtext-java.rst
   
playCommand()
~~~~~~~~~~~~~

Use the ``playCommand()`` method to execute a specific command in the client app. For details, see :ref:`playCommand() <playCommand()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/playcommand-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/playcommand-java.rst
   
   
activate()
~~~~~~~~~~

Use the ``activate()`` method to activate the Alan AI button programmatically. For details, see :ref:`activate() <activate()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/activate-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/activate-java.rst
   
deactivate()
~~~~~~~~~~~~

Use the ``deactivate()`` method to deactivate the Alan AI button programmatically. For details, see :ref:`deactivate() <deactivate()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/deactivate-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/deactivate-java.rst
   
isActive()
~~~~~~~~~~

Use the ``isActive()`` method to check the Alan AI button state: active or not. For details, see :ref:`isActive() <isActive()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/isactive-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/isactive-java.rst
   
getWakewordEnabled()
~~~~~~~~~~~~~~~~~~~~

Use the ``getWakewordEnabled()`` method to check the state of the wake word for the Alan AI button. For details, see :ref:`getWakewordEnabled() <getWakewordEnabled()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/getwakeword-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/getwakeword-java.rst
   
   
setWakewordEnabled()
~~~~~~~~~~~~~~~~~~~~

Use the ``setWakewordEnabled()`` method to enable or disable the wake word for the Alan AI button. For details, see :ref:`setWakewordEnabled() <setWakewordEnabled()>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/setwakeword-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/setwakeword-java.rst


Using handlers
--------------

You can use the following :doc:`Alan AI handlers <../methods/handlers>` in your app:

-  `onCommand handler`_
-  `onButtonState handler`_
-  `onEvent handler`_

onCommand handler
~~~~~~~~~~~~~~~~~

Use the ``onCommand`` handler to :ref:`handle commands sent from the dialog script <Sending commands to the app>`. For details, see :doc:`onCommand handler <../methods/command-handler>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/command-handler-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/command-handler-java.rst

onButtonState handler
~~~~~~~~~~~~~~~~~~~~~

Use the ``onButtonState`` handler to capture and handle the Alan AI button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/state-handler-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/state-handler-java.rst

onEvent handler
~~~~~~~~~~~~~~~

Use the ``onEvent`` handler to capture and handle events emitted by Alan AI: get user's utterances, assistant responses and so on. For details, see :doc:`onEvent handler <../methods/event-handler>`.

.. tabbed:: Kotlin

   .. include:: ../snippets/event-handler-kotlin.rst
   
.. tabbed:: Java

   .. include:: ../snippets/event-handler-java.rst

Switching between logging levels
--------------------------------

You can switch to the extended logging level with a static ``enableLogging`` method of the Alan object:

``Alan.enableLogging(true);``

Troubleshooting
---------------

To troubleshoot problems you may have with your Android app, check the solutions below:

- The minimum possible Android SDK version required by the Alan AI SDK is 21. If the version in your project is lower, you may encounter the following error: ``AndroidManifest.xml Error: uses-sdk:minSdkVersion 16 cannot be smaller than version 21 declared in library [:alan_voice]``. Open the ``app/build.gradle`` file, under ``defaultConfig``, locate ``minSdkVersion`` and change the version to 21.

- If gradle fails to get all dependencies required by the Alan AI SDK, you will encounter the following error: ``Could not find <dependency-name> required by project :app > alan.app:sdk:x.xx.x``. 

  Make sure ``jcenter()`` is added to your project:

  1. In your project, open the ``settings.gradle`` file.
  2. Check the repositories list. If ``jcenter()`` is not in the list, add it:
   
     .. code-block:: groovy
        :caption: settings.gradle
      
        dependencyResolutionManagement {
          repositories {
            mavenCentral()
            jcenter() 
          }
        }
   
  3. Sync and run your project.
  
- - (If running the app on an emulator) All virtual microphone options must be enabled. On the emulator settings bar, click **More (...)** > **Microphone** and make sure all toggles are set to the *On* position.
  
  
What's next?
------------

.. panels::
   :column: col-lg-12 col-md-12 col-sm-12 col-xs-12 p-2
   
   ---
   :card: border-0 + custom-style-blue
   
   .. image:: /_static/assets/img/about/git-purple.svg
   
   .. raw:: html
	 
	  <p style="font-size: 20px; font-weight: 700;">Example apps</p>
	  <p>Find and explore examples of voice-enabled apps on the <a href="https://github.com/alan-ai" target="_blank">Alan AI GitHub repository.</p>
	  
   .. link-button:: https://github.com/alan-ai/alan-sdk-android/tree/master/examples
        :type: url
        :text: View on GitHub
        :classes: btn-outline-primary
   

.. raw:: html

   <div id="purple-background"></div>