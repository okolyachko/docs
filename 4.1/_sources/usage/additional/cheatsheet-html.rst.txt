Alan AI cheat sheet (web)
=========================
|

.. raw:: html
   
   <img src="../../../_static/assets/img/about/cheatsheet-heading.svg" style="border:0px; padding-left:20px" width="450"/>
   
|
|

.. panels::
   :column: col-lg-3 col-md-6 col-sm-6 col-xs-12
   :container: + custom-style-cheatsheet

   ---
   :card: border-1 + custom-style-cheat
   
   
   .. raw:: html
   
      <span class="cheat-mono" style="color: #0060B9">pattern</span> &mdash; phrase to invoke a voice/text command or a response to be played <br/><br/>
	  
	  <span class="cheat-mono" style="color: #62BBFF">value</span> &mdash; specified value <br/><br/>
	  
	  <span class="cheat-mono" style="color: #5536B3">params</span> &mdash; passed parameters <br/><br/>
	  
	  <span class="cheat-mono" style="color: #F19305">action</span> &mdash; action to be performed <br/><br/>
	  
	  <span class="cheat-mono" style="color: #149086">output</span> &mdash; data outcome <br/><br/>
	  
	  <span class="cheat-mono" style="color: #081746">[...]</span> &mdash; optional data or parameters <br/><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -20px">
	  
	  <p class="heading">Intents</p>
	  
	  <p>Define a voice/text command to play a response</p>
	  
	  <p class="cheat-text">intent('<span class="cheat-mono" style="color: #0060B9">pattern</span>'[, '<span class="cheat-mono" style="color: #0060B9">patternN</span>'], reply('<span class="cheat-mono" style="color: #0060B9">pattern</span>'))</p>
	  
	  <br/>
	  
	  <p>Define a voice/text command to play a response or perform an action</p>
	  
	  <p class="cheat-text">intent('<span class="cheat-mono" style="color: #0060B9">pattern</span>'[, '<span class="cheat-mono" style="color: #0060B9">patternN</span>'], p => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br/><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -20px">
	  
	  <p class="heading">Patterns</p>
	  
	  <p>Define alternatives</p>
	  
	  <p class="cheat-text">intent('<span class="cheat-mono" style="color: #62BBFF">phrase1</span>|<span class="cheat-mono" style="color: #62BBFF">phrase2</span>')</p><br/>
	  
	  <p>Define optional words and phrases</p>
	  
	  <p class="cheat-text">intent('<span class="cheat-mono" style="color: #0060B9">pattern</span> (<span class="cheat-mono" style="color: #62BBFF">optional phrase</span><span class="cheat-mono" style="color: #5536B3">|</span>)')</p><br/><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -20px">
	  
	  <p class="heading">Response functions</p>
	  
	  <p>Play a response (in case of multiple patterns, a response is picked at random)</p>
	  
	  <p class="cheat-text">reply('<span class="cheat-mono" style="color: #0060B9">pattern</span>'[, '<span class="cheat-mono" style="color: #0060B9">patternN</span>'])</p><br/>
	  
	   <p>Play a response</p>
	   
	   <p class="cheat-text">p.play('<span class="cheat-mono" style="color: #0060B9">pattern</span>')</p><br/>
	   
	   <p>Define voice settings for the assistant reply: accent (<i>en</i>, <i>fr</i>, <i>de</i>, <i>it</i>, <i>ru</i>, <i>es</i>), gender (<i>‘male’</i>/<i>‘female’</i>), voice type, speaking pitch, speaking rate</p>
	   
	   <p class="cheat-text">p.play([<span class="cheat-mono" style="color: #5536B3">voice(code, gender, type, pitch, rate)</span>, ]'<span class="cheat-mono" style="color: #0060B9">pattern</span>')</p><br>
	   
	   <p>Define play options: <i>force:true</i> (execute if the button is inactive), <i>activate:true</i> (activate the button before), <i>deactivate:true</i> (deactivate the button after)</p>
	   
	   <p class="cheat-text">p.play('<span class="cheat-mono" style="color: #0060B9">pattern</span>'[, <span class="cheat-mono" style="color: #5536B3">opts(options)</span>])</p><br/>
	   
	   <p>Send a command to the app</p>
	   
	   <p class="cheat-text">p.play({<span class="cheat-mono" style="color: #62BBFF">command:data</span>})</p><br/><br/><br/>
	   
	   <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -20px">
	   
	   <p class="heading">Q&A AI assistant</p>
	   
	   <p>Define a URL of a resource to be indexed</p>
	   
	   <p class="cheat-text">corpus({url: <span class="cheat-mono" style="color: #62BBFF">url</span>, depth: <span class="cheat-mono" style="color: #62BBFF">depthLevel</span>, maxPages: <span class="cheat-mono" style="color: #62BBFF">number</span>})</p><br/>
	   
	   <p>Define text strings to be used by the AI assistant in the dialog</p>
	   
	   <p class="cheat-text">corpus('<span class="cheat-mono" style="color: #62BBFF">text</span>')</p><br/>
	  
   
   ---
   :card: border-1 + custom-style-cheat
   
   .. raw:: html   
   
      <p class="heading-top" id="slots">User-defined slots</p>
   
      <p>Define a static list of values expected in the input</p>
   
      <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br/>
	  
	  <p>Provide labels to classify or identify the slot values</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #62BBFF">value1~label1</span>|<span class="cheat-mono" style="color: #62BBFF">value2~label2</span>) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.label</span></p><br/>
	  
	  <p>Enable fuzzy matching to capture similar variants</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span><span class="cheat-mono" style="color: #5536B3">~</span> <span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br/>
	  
	  <p>Make a slot optional</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span><span class="cheat-mono" style="color: #5536B3">|</span>)</p><br/>
	  
	  <p>Capture several slot values</p>
	  
	  <p class="cheat-text">intent(‘$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>) and $(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span> )’) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME_</span> (array), <span class="cheat-mono" style="color: #149086">p.SLOTNAME_[0].value</span>, <span class="cheat-mono" style="color: #149086">p.SLOTNAME_[1].value</span></p><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">
	  
	  <p class="heading">Predefined slots</p>
	  
	  <p>Capture date values</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(187, 146, 255, 0.5)">DATE</span>) => <span class="cheat-mono" style="color: #149086">p.DATE.value</span>, <span class="cheat-mono" style="color: #149086">p.DATE.moment</span>, <span class="cheat-mono" style="color: #149086">p.DATE.luxon</span></p><br/>
	  
	  <p>Capture time values</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">TIME</span>) => <span class="cheat-mono" style="color: #149086">p.TIME.value</span>, <span class="cheat-mono" style="color: #149086">p.TIME.moment<span></p><br/>
	  
	  <p>Capture cardinal numbers</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 167, 89, 0.5)">NUMBER</span>) => <span class="cheat-mono" style="color: #149086">p.NUMBER.value</span>, <span class="cheat-mono" style="color: #149086">p.NUMBER.number</span></p><br/>
	  
	  <p>Capture ordinal numbers</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 252, 94, 0.5)">ORDINAL</span>) => <span class="cheat-mono" style="color: #149086">p.ORDINAL.value</span>, <span class="cheat-mono" style="color: #149086">p.ORDINAL.number</span></p><br/>
	  
	  <p>Capture locations</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(239, 131, 239, 0.5)">LOC</span>) => <span class="cheat-mono" style="color: #149086">p.LOC.value</span></p><br/>
	  
	  <p>Capture names</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">NAME</span>) => <span class="cheat-mono" style="color: #149086">p.NAME.value</span></p><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">
	  
	  <p class="heading">Dynamic slots</p>
	  
	  <p>Define a dynamic slot at the project level</p>
	  
	  <p class="cheat-text">project.name = {en: “<span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>|<span class="cheat-mono" style="color: #62BBFF">value3</span>”}</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #5536B3">p:</span>name) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br>
	  
	  <p>Define a dynamic slot at the dialog session level</p>
	  
	  <p class="cheat-text">p.userData.name = {en: “<span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>|<span class="cheat-mono" style="color: #62BBFF">value3</span>”}</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #5536B3">u:</span>name) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br>
	  
	  <p>Get data for a dynamic slot with the visual state</p>
	  
	  <p class="cheat-text">let name = [“<span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>|<span class="cheat-mono" style="color: #62BBFF">value3</span>”]</p>
	  
	  <p class="cheat-text">p.visual.data = {en: name};</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span> <span class="cheat-mono" style="color: #5536B3">v:</span>name) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br>
	  
	  <p>Define a dynamic slot in a short form</p>
	  
	  <p class="cheat-text">project.name = {en: “<span class="cheat-mono" style="color: #62BBFF">value1</span>|<span class="cheat-mono" style="color: #62BBFF">value2</span>|<span class="cheat-mono" style="color: #62BBFF">value3</span>”}</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="color: #5536B3">p:</span>name) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br/>
	  
	  <p>Define labels for dynamic slots: see <a href="#slots">User-defined slots</a>.</p><br>
	  
	  <p>Enable fuzzy matching for dynamic slots: see <a href="#slots">User-defined slots</a>.</p><br>
	  
	  <p>Make a dynamic slot optional: see <a href="#slots">User-defined slots</a>.</p><br>
	  
	  <p>Capture several slot values: see <a href="#slots">User-defined slots</a>.</p><br>
	  
   
   ---
   :card: border-1 + custom-style-cheat
   
   .. raw:: html 
	  
	  <p class="heading-top">RegEx slots</p>
	  
	  <p>Capture digit and/or letter combination</p>
	  
	  <p class="cheat-text">const reg = "([A-Za-z]{1}\\s?){6}"</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span><span class="cheat-mono" style="color: #5536B3">*</span> ${reg}) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br>
	  
	  <p>Capture any user’s input</p>
	  
	  <p class="cheat-text">$(<span class="cheat-mono" style="background: rgba(255, 203, 203, 0.5)">SLOTNAME</span><span class="cheat-mono" style="color: #5536B3">*</span> .+) => <span class="cheat-mono" style="color: #149086">p.SLOTNAME.value</span></p><br/><br/><br/>
	  
      <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">
   
      <p class="heading">Contexts</p>
   
      <p>Define a context</p>
   
      <p class="cheat-text">let <span class="cheat-mono" style="color: #62BBFF">contextName</span> = context(() => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br>
   
      <p>Activate a context</p>
   
      <p class="cheat-text">intent('<span class="cheat-mono" style="color: #0060B9">pattern</span>', p => {..., p.then(<span class="cheat-mono" style="color: #62BBFF">contextName</span>)}</p><br>
   
      <p>Pass data to the context</p>
   
      <p class="cheat-text">p.then(<span class="cheat-mono" style="color: #62BBFF">contextName</span>, state: {<span class="cheat-mono" style="color: #62BBFF">data:yourData</span>}) => <span class="cheat-mono" style="color: #149086">p.state.data</span></p><br>
   
      <p>Resolve a context</p>
   
      <p class="cheat-text">p.resolve([<span class="cheat-mono" style="color: #62BBFF">data:yourData</span>])</p><br>
   
      <p>Reset a context</p>
   
      <p class="cheat-text">p.resetContext()</p><br>
   
      <p>Define intents to be matched at any time without switching the current context</p>
   
      <p class="cheat-text">intent(<span class="cheat-mono" style="color: #5536B3">noctx</span>, '<span class="cheat-mono" style="color: #0060B9">pattern</span>', ...) or noContext(() => {intent(...)})</p><br>
   
      <p>Play a prompt for an expected input</p>
   
      <p class="cheat-text">fallback('<span class="cheat-mono" style="color: #0060B9">pattern1</span>'[, '<span class="cheat-mono" style="color: #0060B9">patternN</span>'])</p><br>
   
      <p>Title a context</p>
   
      <p class="cheat-text">title('<span class="cheat-mono" style="color: #62BBFF">contextName</span>')</p><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">
	  
	  <p class="heading">Built-in JS libraries</p>
	  
	  <p>Make API calls</p>
   
      <p class="cheat-text">axios, request</p><br>
	  
	  <p>Work with time</p>
   
      <p class="cheat-text">moment-timezone, luxon</p><br>
	  
	  <p>Work with arrays, numbers, objects, strings and so on</p>
   
      <p class="cheat-text">lodash</p><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">
	  
	  <p class="heading">Recognition hints</p>
	  
	  <p>Provide a list of hints to help recognize specific terms</p>
   
      <p class="cheat-text">recognitionHints('<span class="cheat-mono" style="color: #62BBFF">hint</span>'[, '<span class="cheat-mono" style="color: #62BBFF">hintN</span>'])</p>
	  
   ---
   :card: border-1 + custom-style-cheat-last
   
   .. raw:: html
	  
	  <p class="heading-top">Predefined objects</p>
	  
	  <p>Store static device- and user-specific data passed from the client app</p>
	  
	  <p class="cheat-text">authData.<span class="cheat-mono" style="color: #62BBFF">data</span> => <span class="cheat-mono" style="color: #149086">p.authData.data</span></p><br>
	  
	  <p>Store state data to be available globally at the project scope</p>
	  
	  <p class="cheat-text">project.info = {<span class="cheat-mono" style="color: #62BBFF">data:yourData</span>} => <span class="cheat-mono" style="color: #149086">project.info.data</span></p><br>
	  
	  <p>Store the intent match score</p>
	  
	  <p class="cheat-text">p.score</p><br>
	  
	  <p>Store data to be passed between contexts</p>
	  
	  <p class="cheat-text">p.state.<span class="cheat-mono" style="color: #62BBFF">data</span></p><br>
	  
	  <p>Store visual context data to be passed from the client app. See setVisualState</p>
	  
	  <p class="cheat-text">p.visual.<span class="cheat-mono" style="color: #62BBFF">data</span></p><br>
	  
	  <p>Store user-specific state data to be accessible during the dialog session</p>
	  
	  <p class="cheat-text">p.userData.<span class="cheat-mono" style="color: #62BBFF">data</span></p><br/><br/><br/>
	  
      <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">

      <p class="heading">Predefined callbacks</p>   
	  
	  <p>Define actions to be performed when the script is saved and dialog model is built</p>
   
      <p class="cheat-text">onCreateProject(() => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br>
	  
      <p>Define actions to be performed when the dialog session starts</p>
   
      <p class="cheat-text">onCreateUser((p) => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br>
	  
      <p>Define actions to be performed when the dialog session ends</p>
   
      <p class="cheat-text">onCleanupUser((p) => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br>
	  
      <p>Define actions to be performed when the visual state is set</p>
   
      <p class="cheat-text">onVisualState((p, s) => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br>
	  
      <p>Define actions to be performed when a user event is triggered in the client app: <i>buttonReady</i>, <i>buttonClicked</i>, <i>micPermissionPrompt</i>, <i>micAllowed</i>, <i>firstActivate</i>, </i>showPopup</i>, <i>popupCloseClicked</i>, <i>recognized</i></p>
   
      <p class="cheat-text">onUserEvent((p, e) => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br>
	  
	  <p>Define actions to be performed when a context is activated</p>
   
      <p class="cheat-text">onEnter((p) => { <span class="cheat-mono" style="color: #F19305">action</span> })</p><br/><br/><br/>
	  
	  <hr style="border-top: 0.25px solid #e2e2e2; margin-right: -20px; margin-left: -50px">
	   
	  <p class="heading">Logs</p>
	   
	  <p>Write info messages to Alan AI Studio logs</p>
	   
	  <p class="cheat-text">console.log(<span class="cheat-mono" style="color: #62BBFF">data</span>)</p><br/>
	   
	  <p>Write error messages to Alan AI Studio logs</p>
	   
	  <p class="cheat-text">console.error(<span class="cheat-mono" style="color: #62BBFF">data</span>)</p>
	  
.. raw:: html
   
   <hr style="border-top: 0.25px solid #e2e2e2;">
	  
	  
.. panels::
   :column: col-lg-4 col-md-6 col-sm-6 col-xs-12
   :container: + custom-style-cheatsheet
   
   ---
   :card: border-1 + custom-style-cheat

   .. raw:: html
	  
	 <p class="heading-top-purple">Client API methods</p>
	 
	 <p>Send information about the visual state from the client app to the dialog script</p>
	 
	 <p class="cheat-text">setVisualState(<span class="cheat-mono" style="color: #62BBFF">visualStateData:object</span>)</p><br/>
	 
	 <p>Send data or perform actions without a voice/text command</p>
	 
	 <p class="cheat-text">projectAPI.<span class="cheat-mono" style="color: #5536B3">method</span> = function(p, param, callback) {</p>
	 <p class="cheat-text">&nbsp;&nbsp;p.userData.<span class="cheat-mono" style="color: #62BBFF">data</span> = param.<span class="cheat-mono" style="color: #62BBFF">data</span>;</p>
	 <p class="cheat-text">&nbsp;&nbsp;callback();</p>
	 <p class="cheat-text">};</p>
	 <p class="cheat-text">callProjectApi(<span class="cheat-mono" style="color: #62BBFF">method</span>:string, <span class="cheat-mono" style="color: #62BBFF">data</span>:object, <span class="cheat-mono" style="color: #62BBFF">callback</span>:function)</p><br/>
	 
	 <p>Play a text message in the client app</p>
	 
	 <p class="cheat-text">playText(<span class="cheat-mono" style="color: #62BBFF">text</span>:string)</p><br/>
	 
	 <p>Send a text message to Alan AI as the user’s input</p>
	 
	 <p class="cheat-text">sendText(<span class="cheat-mono" style="color: #62BBFF">text</span>:string)</p><br/>
	 
	 <p>Execute a command in the client app</p>
	 
	 <p class="cheat-text">playCommand(<span class="cheat-mono" style="color: #62BBFF">command</span>:object)</p><br/>

  
   ---
   :card: border-1 + custom-style-cheat

   .. raw:: html
   
     <p class="heading-top-purple">Client API methods (continued)</p>  
	 
	 <p>Activate the Alan AI button programmatically</p>
	 
	 <p class="cheat-text">activate()</p><br/>
	 
	 <p>Deactivate the Alan AI button programmatically</p>
	 
	 <p class="cheat-text">deactivate()</p><br/>
	 
     <p>Check the Alan AI button state</p>
	 
	 <p class="cheat-text">isActive()</p><br/>
	 
     <p>Remove the Alan AI button from the parent element, page (supported on Web, Ionic)</p>
	 
	 <p class="cheat-text">remove()</p><br/>
	 
     <p>Check the state of the wake word (supported on iOS, Android)</p>
	 
	 <p class="cheat-text">getWakewordEnabled()</p><br/>
	 
     <p>Set the state of the wake word (supported on iOS, Android)</p>
	 
	 <p class="cheat-text">setWakewordEnabled(<span class="cheat-mono" style="color: #62BBFF">enabled</span>:boolean)</p><br/>
	 
   ---
   :card: border-1 + custom-style-cheat-last

   .. raw:: html
   
     <p class="heading-top-purple">Handlers*</p>
	 
	 <p>Handle commands sent from the dialog script to the client app</p>
	 
	 <p class="cheat-text">onCommand: function (commandData) { <span class="cheat-mono" style="color: #F19305">action</span> }</p><br/>
	 
	 <p>Handle Alan AI button state changes</p>
	 
	 <p class="cheat-text">onButtonState: function (e) { <span class="cheat-mono" style="color: #F19305">action</span> }</p><br/>
	 
	 <p>Handle connection status to the AI assistant project in the Alan AI Cloud</p>
	 
	 <p class="cheat-text">onConnectionStatus: function (e) { <span class="cheat-mono" style="color: #F19305">action</span> }</p><br/>
	 
	 <p>Handle events received from Alan AI</p>
	 
	 <p class="cheat-text">onEvent: function (e) { <span class="cheat-mono" style="color: #F19305">action</span> }</p><br/>
	 
	 <p style="right:20px">* Examples are provided for the Web platform</p>

   
.. link-button:: /docs
     :type: url
     :text: Back to docs
     :classes: btn-outline-primary

.. raw:: html

   <div id="blue-background"></div>
   <div id="cheatsheet"></div>

