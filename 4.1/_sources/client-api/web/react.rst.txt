React
=====

.. raw:: html
   
   <a href="https://www.npmjs.com/package/@alan-ai/alan-sdk-web">
   <img src="https://img.shields.io/npm/v/@alan-ai/alan-sdk-web.svg" align="left" /></a>

   <a href="https://github.com/alan-ai/alan-sdk-web/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-web" align="left" /></a>
   
   <br/>

Integrating with Alan AI
------------------------

To integrate a React app with Alan AI:

1. Add the Alan AI Web SDK to your app. You can do it in two ways: 

   - With the npm package 
   - In the browser library mode 

   .. tabbed:: NPM package
   
      To install the Alan AI Web SDK with the npm package:

      a. In the Terminal, run the command:

         .. code-block::
            :caption: Terminal

            npm install @alan-ai/alan-sdk-web --save

      b. Import ``alanBtn`` to your React component:

         .. code-block:: js
            :caption: Client app

            import alanBtn from "@alan-ai/alan-sdk-web";

   .. tabbed:: Browser library mode
   
      To load the Alan AI Web SDK in the browser library mode, add the ``alan_lib.min.js`` library to the ``index.html`` file using the ``<script>`` tag:

      .. code-block:: html
         :caption: Client app

         <script type="text/javascript" src="https://studio.alan.app/web/lib/alan_lib.min.js"></script>

2. Add the Alan AI button to your React component:
   
   - React functional component
   - React class component

   .. tabbed:: Functional component

      .. code-block:: coffeescript
         :caption: Client app

         import React, { useEffect } from 'react';
		  
         useEffect(() => {
           alanBtn({
             key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
             onCommand: (commandData) => {
               if (commandData.command === 'go:back') {
                 // Call the client code that will react to the received command
               }
             }
           });
         }, []);
		 
      If you want to access the component state (or props) inside the callbacks that are passed to the AlanButton, please remember that you may face the «stale closure» problem that occurs because of the closure. To avoid this problem, you may use refs to store your state as shown in the example below:
	  
      .. code-block:: coffeescript
         :caption: Client app

         function useStateReference(value) {
           const ref = useRef(value);
           const [, forceRender] = useState(false);
		   
           function updateState(newState) {
             if (!Object.is(ref.current, newState)) {
               ref.current = newState;
               forceRender(s => !s);
             }
           }

           return [ref, updateState];
         }

         function App() {
           const [count, setCount] = useStateReference({});
           useEffect(() => {
             alanBtn({
               key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
               onCommand: () => {
                 console.info('Actual count value:', count.current);
               }
             });
           }, []);

           return (
             <div className="App">
             </div>
           );
         }

      With the code above, the count variable will hold the «actual» value.

   .. tabbed::  Class component

      .. code-block:: coffeescript
         :caption: Client app

         componentDidMount() {
           this.alanBtnInstance = alanBtn({ 
             key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
             onCommand: (commandData) => {
               if (commandData.command === 'go:back') {
                 // Call the client code that will react to the received command
               }
             },
           });
         }

.. note::
	  
   Regularly update the ``@alan-ai/alan-sdk-web`` package your project depends on. To check if a newer version is available, run ``npm outdated``. To update the alan package, run ``npm update @alan-ai/alan-sdk-web``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.
   
   
Specifying the Alan AI button parameters
----------------------------------------

.. include:: ../snippets/button-parameters-web.rst

Changing the Alan AI button position
------------------------------------

.. include:: ../snippets/button-position-web.rst
   
Using client API methods
------------------------

You can use the following :doc:`client API methods <../methods/common-api>` in your React app:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `sendText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_
-  `remove()`_
- `textChat.isAudioOutputEnabled()`_
- `textChat.setAudioOutputEnabled()`_

setVisualState()
~~~~~~~~~~~~~~~~

Use the ``setVisualState()`` method to inform the in-app assistant about the app’s visual context. For details, see :ref:`setVisualState() <setVisualState()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from "@alan-ai/alan-sdk-web";
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.setVisualState({ data: 'your data' });
         }}>Send visual state</button>
       </div>
     );
   }

   export default App;
   
callProjectApi()
~~~~~~~~~~~~~~~~

Use the ``callProjectApi()`` method to send data from the client app to the dialog script and trigger activities without voice and text commands. For details, see :ref:`callProjectApi() <callProjectApi()>`.

.. code-block:: alan
   :caption: Dialog script

   projectAPI.setClientData = function(p, param, callback) {
     console.log(param);
   };

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from "@alan-ai/alan-sdk-web";
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.callProjectApi("setClientData", {value:"your data"}, function (error, result){
             // handle error and result here
           });
         }}>Call setClientData method</button>
       </div>
     );
   }

   export default App;
   
playText()
~~~~~~~~~~

Use the ``playText()`` method to play specific text in the client app. For details, see :ref:`playText() <playText()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from "@alan-ai/alan-sdk-web";
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.playText("Hi there, I am Alan");
         }}>Play text</button>
       </div>
     );
   }

   export default App;
   
sendText()
~~~~~~~~~~

Use the ``sendText()`` method to send a text message to Alan AI as the user's input. For details, see :ref:`sendText() <sendText()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from "@alan-ai/alan-sdk-web";
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.sendText("Hello Alan, can you help me?");
         }}>Play text</button>
       </div>
     );
   }

   export default App;
   
playCommand()
~~~~~~~~~~~~~

Use the ``playCommand()`` method to execute a specific command in the client app. For details, see :ref:`playCommand() <playCommand()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from '@alan-ai/alan-sdk-web';
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
         onCommand: (commandData) => {
           if (commandData.command === 'goBack') {
             // Call client code that will react to the received command
           }
         },
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.playCommand({command: "goBack"});
         }}>Play command</button>
       </div>
     );
   }

   export default App;
   
   
activate()
~~~~~~~~~~

Use the ``activate()`` method to activate the Alan AI button programmatically. For details, see :ref:`activate() <activate()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from '@alan-ai/alan-sdk-web';
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.activate();
         }}>Activate the Alan AI button</button>
       </div>
     );
   }

   export default App;
   
deactivate()
~~~~~~~~~~~~

Use the ``deactivate()`` method to deactivate the Alan AI button programmatically. For details, see :ref:`deactivate() <deactivate()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from '@alan-ai/alan-sdk-web';
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.deactivate();
         }}>Deactivate the Alan AI button</button>
       </div>
     );
   }

   export default App;
   
isActive()
~~~~~~~~~~

Use the ``isActive()`` method to check the Alan AI button state: active or not. For details, see :ref:`isActive() <isActive()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from '@alan-ai/alan-sdk-web';
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           console.log('Button is active: ' + alanBtnRef.btnInstance.isActive());
         }}>Check the button state</button>
       </div>
     );
   }

   export default App;
   
   
remove()
~~~~~~~~

Use the ``remove()`` method to remove the Alan AI button from the parent element. For details, see :ref:`remove() <remove()>`.

.. code-block:: coffeescript
   :caption: Client app

   import alanBtn from '@alan-ai/alan-sdk-web';
   import React, { useEffect, useRef } from 'react';

   function App() {
     const alanBtnRef = useRef({}).current;
     useEffect(() => {
       alanBtnRef.btnInstance = alanBtn({
         key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
       });
     }, []);

     return (
       <div className="App">
         <button onClick={() => {
           alanBtnRef.btnInstance.remove();
         }}>Remove the Alan AI button</button>
       </div>
     );
   }

   export default App;
   
textChat.isAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.isAudioOutputEnabled()`` method to get the state of audio output for the Alan AI Chat. For details, see :ref:`textChat.isAudioOutputEnabled() <textChat.isAudioOutputEnabled()>`.

.. include:: ../snippets/get-audio-web.rst

textChat.setAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.setAudioOutputEnabled()`` method to enable or disable audio output for the Alan AI Chat. For details, see :ref:`textChat.setAudioOutputEnabled() <textChat.setAudioOutputEnabled()>`.

.. include:: ../snippets/set-audio-web.rst

Using handlers
--------------

You can use the following :doc:`Alan AI handlers <../methods/handlers>` in your React app:

-  `onCommand handler`_
-  `onButtonState handler`_
-  `onConnectionStatus handler`_
-  `onEvent handler`_

onCommand handler
~~~~~~~~~~~~~~~~~

Use the ``onCommand`` handler to :ref:`handle commands sent from the dialog script <Sending commands to the app>`. For details, see :doc:`onCommand handler <../methods/command-handler>`.

.. include:: ../snippets/command-handler-web.rst

onButtonState handler
~~~~~~~~~~~~~~~~~~~~~

Use the ``onButtonState`` handler to capture and handle the Alan AI button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

.. include:: ../snippets/state-handler-web.rst

onConnectionStatus handler
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``onConnectionStatus`` handler to capture and handle the connection status for the virtual assistant project. For details, see :doc:`onConnectionStatus handler <../methods/connection-handler>`.

.. include:: ../snippets/connection-handler-web.rst

onEvent handler
~~~~~~~~~~~~~~~

Use the ``onEvent`` handler to capture and handle events emitted by Alan AI: get user's utterances, assistant responses and so on. For details, see :doc:`onEvent handler <../methods/event-handler>`.

.. include:: ../snippets/event-handler-web.rst
   
   
What's next?
------------

.. panels::
   :column: col-lg-12 col-md-12 col-sm-6 col-xs-12 p-2

   ---
   :card: border-0 + custom-style-res + git
   
   .. link-button:: https://github.com/alan-ai/alan-sdk-web/tree/master/examples/
      :type: url
      :text: 
      :classes: stretched-link panel
	  
   .. raw:: html
      
	  <p style="font-weight: 600">Example apps</p>
   
   Find and explore examples of AI assistants in Alan AI GitHub.

.. raw:: html

   <div id="purple-background"></div>


