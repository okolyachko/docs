Vue
===

.. raw:: html
   
   <a href="https://www.npmjs.com/package/@alan-ai/alan-sdk-web">
   <img src="https://img.shields.io/npm/v/@alan-ai/alan-sdk-web.svg" align="left" style="border:inherit; padding-right:10px" /></a>

   <a href="https://github.com/alan-ai/alan-sdk-web/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-web" align="left" style="border:inherit"/></a>
   
   <br/>

Integrating with Alan AI
------------------------

To integrate a Vue app with Alan AI:

1. Add the Alan AI Web SDK to your app. You can do it in two ways: 

   - With the npm package 
   - In the browser library mode
   
   .. tabbed:: NPM package

      To install the Alan Web SDK with the npm package:

      a. In the Terminal, run the command:

         .. code-block::
            :caption: Terminal

            npm install @alan-ai/alan-sdk-web --save

      b. Import the ``alanBtn`` into your ``main.js`` file:

         .. code-block:: js
            :caption: Client app

            import alanBtn from "@alan-ai/alan-sdk-web";
			 
   .. tabbed:: Browser library mode   

      To load the Alan AI Web SDK in the browser library mode, add the ``alan_lib.min.js`` library to the ``index.html`` file using the ``<script>`` tag:

      .. code-block:: html
         :caption: Client app

         <script type="text/javascript" src="https://studio.alan.app/web/lib/alan_lib.min.js"></script>

2. Add the Alan AI button to the ``main.js`` file in your project:

   .. code-block:: typescript
      :caption: Client app

      alanBtn({ 
        key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
        onCommand: (commandData) => {
          if (commandData.command === 'go:back') {
            // Call the client code that will react to the received command
          }
        },
      });

.. note::
	  
   Regularly update the ``@alan-ai/alan-sdk-web`` package your project depends on. To check if a newer version is available, run ``npm outdated``. To update the alan package, run ``npm update @alan-ai/alan-sdk-web``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.
   
Specifying the Alan button parameters
-------------------------------------

.. include:: ../snippets/button-parameters-web.rst

Changing the Alan AI button position
------------------------------------

.. include:: ../snippets/button-position-web.rst


Using client API methods
------------------------

You can use the following :doc:`client API methods <../methods/common-api>` in your Vue app:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `sendText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_
-  `remove()`_
- `textChat.isAudioOutputEnabled()`_
- `textChat.setAudioOutputEnabled()`_

setVisualState()
~~~~~~~~~~~~~~~~

Use the ``setVisualState()`` method to inform the AI assistant about the appâ€™s visual context. For details, see :ref:`setVisualState() <setVisualState()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="setState">Set state</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         setState() {
           this.$alanBtnInstance.setVisualState({data: "yourdata"});
         }
       },
     }
   </script>

   
callProjectApi()
~~~~~~~~~~~~~~~~

Use the ``callProjectApi()`` method to send data from the client app to the dialog script and trigger activities without voice and text commands. For details, see :ref:`callProjectApi() <callProjectApi()>`.

.. code-block:: alan
   :caption: Dialog script

   projectAPI.setClientData = function(p, param, callback) {
     console.log(param);
   };

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="callMethod">Call setClientData</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         callMethod() {
           this.$alanBtnInstance.callProjectApi("setClientData", {value:"your data"}, function (error, result){
             // Handling error and result
           });
         }
       },
     }
   </script>
   
playText()
~~~~~~~~~~

Use the ``playText()`` method to play specific text in the client app. For details, see :ref:`playText() <playText()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="playText">Play text</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         playText() {
           this.$alanBtnInstance.playText("Hello, I am Alan!");
         }
       },
     }
   </script>
   
   
sendText()
~~~~~~~~~~

Use the ``sendText()`` method to send a text message to Alan AI as the user's input. For details, see :ref:`sendText() <sendText()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="sendText">Send text</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         sendText() {
           this.$alanBtnInstance.sendText("Hello Alan, can you help me?");
         }
       },
     }
   </script>
   
playCommand()
~~~~~~~~~~~~~

Use the ``playCommand()`` method to execute a specific command in the client app. For details, see :ref:`playCommand() <playCommand()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
     onCommand: (commandData) => {
       if (commandData.command === 'goBack') {
         // Call client code that will react to the received command
       }
     }
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="playCommand">Play command</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         playCommand() {
           this.$alanBtnInstance.playCommand({command: "goBack"});
         }
       },
     }
   </script>
   
activate()
~~~~~~~~~~

Use the ``activate()`` method to activate the Alan AI button programmatically. For details, see :ref:`activate() <activate()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="activateButton">Activate button</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         activateButton() {
           this.$alanBtnInstance.activate();
         }
       },
     }
   </script>
   
deactivate()
~~~~~~~~~~~~

Use the ``deactivate()`` method to deactivate the Alan AI button programmatically. For details, see :ref:`deactivate() <deactivate()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="deactivateButton">Deactivate button</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         deactivateButton() {
           this.$alanBtnInstance.deactivate();
         }
       },
     }
   </script>
   
isActive()
~~~~~~~~~~

Use the ``isActive()`` method to check the Alan AI button state: active or not. For details, see :ref:`isActive() <isActive()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="checkState">Check button state</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         checkState() {
           console.log("The button is active: " + this.$alanBtnInstance.isActive());
         }
       },
     }
   </script>
   
   
remove()
~~~~~~~~

Use the ``remove()`` method to remove the Alan AI button from the parent element. For details, see :ref:`remove() <remove()>`.

.. code-block:: coffeescript
   :caption: main.js
   
   import Vue from 'vue'
   import App from './App.vue'
   import alanBtn from "@alan-ai/alan-sdk-web";

   Vue.config.productionTip = false

   new Vue({
     render: h => h(App),
   }).$mount('#app')
   
   Vue.prototype.$alanBtnInstance = alanBtn({
     key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
   });
   
.. code-block:: coffeescript
   :caption: App.vue
   
   <template>
     <div id="app">
       <button @click="removeButton">Remove button</button>
     </div>
   </template>

   <script>
     export default {
       methods: {
         removeButton() {
           this.$alanBtnInstance.remove();
         }
       },
     }
   </script>
   
textChat.isAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.isAudioOutputEnabled()`` method to get the state of audio output for the Alan AI Chat. For details, see :ref:`textChat.isAudioOutputEnabled() <textChat.isAudioOutputEnabled()>`.

.. include:: ../snippets/get-audio-web.rst

textChat.setAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.setAudioOutputEnabled()`` method to enable or disable audio output for the Alan AI Chat. For details, see :ref:`textChat.setAudioOutputEnabled() <textChat.setAudioOutputEnabled()>`.

.. include:: ../snippets/set-audio-web.rst

Using handlers
--------------

You can use the following :doc:`Alan AI handlers <../methods/handlers>` in your Vue app:

-  `onCommand handler`_
-  `onButtonState handler`_
-  `onConnectionStatus handler`_
-  `onEvent handler`_

onCommand handler
~~~~~~~~~~~~~~~~~

Use the ``onCommand`` handler to :ref:`handle commands sent from the dialog script <Sending commands to the app>`. For details, see :doc:`onCommand handler <../methods/command-handler>`.

.. include:: ../snippets/command-handler-web.rst

onButtonState handler
~~~~~~~~~~~~~~~~~~~~~

Use the ``onButtonState`` handler to capture and handle the Alan AI button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

.. include:: ../snippets/state-handler-web.rst

onConnectionStatus handler
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``onConnectionStatus`` handler to capture and handle the connection status for the virtual assistant project. For details, see :doc:`onConnectionStatus handler <../methods/connection-handler>`.

.. include:: ../snippets/connection-handler-web.rst

onEvent handler
~~~~~~~~~~~~~~~

Use the ``onEvent`` handler to capture and handle events emitted by Alan AI: get user's utterances, assistant responses and so on. For details, see :doc:`onEvent handler <../methods/event-handler>`.

.. include:: ../snippets/event-handler-web.rst
   
   
What's next?
------------

.. panels::
   :column: col-lg-12 col-md-12 col-sm-12 col-xs-12 p-2
   
   ---
   :card: border-0 + custom-style-blue
   
   .. image:: /_static/assets/img/about/git-purple.svg
   
   .. raw:: html
	 
	  <p style="font-size: 20px; font-weight: 700;">Example apps</p>
	  <p>Find and explore examples of voice-enabled apps on the <a href="https://github.com/alan-ai" target="_blank">Alan AI GitHub repository.</p>
	  
   .. link-button:: https://github.com/alan-ai/alan-sdk-web/tree/master/examples/
        :type: url
        :text: View on GitHub
        :classes: btn-outline-primary


.. raw:: html

   <div id="purple-background"></div>
