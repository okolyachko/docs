Chat buttons
============

To enhance and streamline the user experience, you can display buttons in the Alan AI Chat.

Buttons are clickable elements that present users with a list of options or actions they can take. When the user clicks a button, the AI assistant responds back or triggers some logic defined in the dialog script.

Buttons can be used for a variety of purposes, including:

- Presenting a menu of options
- Initiating specific tasks or actions
- Providing quick access to commonly used features
- Confirming or denying users' actions
- Submitting requests and more

Chat buttons setup
------------------

.. note::

   The button syntax differs between Alan AI SLU versions. Select the appropriate SLU version using the tabs below.  
   
.. tabbed:: SLU 4.x

   To display buttons in the chat UI, use the ``showButtons()`` function in the script. 
   
   In the example below, when a new dialog session starts, the AI assistant displays a greeting with two buttons: ``Talk to sales`` and ``Just browsing``:

   .. code-block:: alan
      :caption: Dialog script

      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showButtons({
              buttons:[
                  {label:'Talk to sales'},
                  {label:'Just browsing'},
              ],
              force: true
          });
      });
	  
      intent("Talk to sales", p => {
          p.play("Awesome, I just need to confirm some information first...");
      });

      intent("Just browsing", p => {
          p.play("What would you like me to do?");
      });
   
   .. image:: /_static/assets/img/script-concepts/buttons-4.x.png


   .. raw:: html
   
      <h2 id="buttons-params-3.x" class="anchor-fixed">Button parameters</h2>

   The ``showButtons()`` function takes the following parameters:

   +---------------------------+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | **Name**                  | **Type**      | **Description**                                                                                                                                                                                                 |
   +===========================+===============+=================================================================================================================================================================================================================+
   | ``buttons``               | Array         | Contains a list of buttons to be displayed in the chat. For each button in the list, the following parameters must be defined:                                                                                  |
   |                           |               |                                                                                                                                                                                                                 | 
   |                           |               | - ``label``: button text                                                                                                                                                                                        |
   |                           |               | - action to be triggered when the button is clicked: ``sendText``, ``setVisualState``, ``callProjectApi``. For details, see `Button actions <#button-actions-4.x>`__.                                           |
   +---------------------------+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``force``                 | Boolean       | If ``showButtons()`` is used after the ``play()`` function, defines whether buttons must be displayed immediately (``true``) or after the text specified in the ``play()`` function has been played (``false``).|
   +---------------------------+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   
   .. raw:: html
   
      <h2 id="button-actions-4.x" class="anchor-fixed">Button actions</h2>


   When a button is clicked, the AI assistant can perform one of the following actions:
   
   - `Invoke an intent <#buttons-intents-4.x>`__
   - `Set the visual state <#buttons-visualstate-4.x>`__
   - `Call a project API method <#buttons-projectapi-4.x>`__
   
   .. raw:: html
   
      <h3 id="buttons-intents-4.x" class="anchor-fixed">Intents</h3>
	  
   On button click, you can invoke an intent in the dialog script. To do this, you can do either of the following:
   
   - Define only the ``label`` parameter for the button. In this case, the label text must match the pattern of the intent you want to invoke. 
   - Define the ``label`` and ``sendText`` parameters for the button. In this case, the label text can vary, and the text of the ``sendText`` parameter must match the pattern of the intent you want to invoke. 
   
   In the example below, when the ``Talk to sales`` and ``Just browsing`` buttons are clicked, corresponding intents are invoked in the dialog script. Note that the label for the second button differs from the pattern of the intent to be invoked:
   
   .. code-block:: alan
      :caption: Dialog script

      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showButtons({
              buttons:[
                  {label:'Talk to sales'},
                  {label:'Just browsing', sendText: "I am just browsing"},
              ],
              force: true
          });
      });
	  
      intent("Talk to sales", p => {
          p.play("Awesome, I just need to confirm some information first...");
      });

      intent("I am just browsing", p => {
          p.play("What would you like me to do?");
      });
   
   
   .. raw:: html
   
      <h3 id="buttons-visualstate-4.x" class="anchor-fixed">Visual state</h3>
	  
   On button click, you can set the visual state in the dialog. To do this, you must add the ``setVusialState`` parameter to the button and define the visual state data.
   
   In the example below, when the ``Go to docs`` button is clicked, the visual state is set to ``docs`` and the AI assistant plays a message: ``Welcome to Alan AI docs!``:
   
   .. code-block:: alan
      :caption: Dialog script
	  
      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showButtons({
              buttons:[
                  {label:'Talk to sales'},
                  {label:'Go to docs', setVisualState: {page: "docs"}}
              ],
              force: true
          });
      });

      intent("Talk to sales", p => {
          p.play("Awesome, I just need to confirm some information first...");
      });

      onVisualState((p, s) => {
          console.log(JSON.stringify(s));
          if (s.page === "docs") {
              p.play("Welcome to Alan AI docs!")
          }
      });
   
   .. raw:: html
   
      <h3 id="buttons-projectapi-4.x" class="anchor-fixed">Project API</h3>
	  
   On button click, you can call a project API method in the dialog script. To do this, you must add the ``callProjectApi`` parameter to the button, define the method name and data you want to pass to the project API method. 
   
   In the example below, when the ``Contact support`` button is clicked, the ``contactSupport()`` project API method is called and the user's name is passed to the method:

   .. code-block:: alan
      :caption: Dialog script
	  
      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showButtons({
              buttons:[
                  {label:'Talk to sales'},
                  {label:'Contact support', callProjectApi: {method:'contactSupport', data:{name:'John Smith'}}}
              ],
              force: true
          });
      });

      intent("Talk to sales", p => {
          p.play("Awesome, I just need to confirm some information first...");
      });

      projectAPI.contactSupport = function(p, param, callback) {
          p.userData.name = param.name
          p.play(`Thank you, ${p.userData.name}. Please provide a detailed description of the problem you have encountered...`);
          callback();
      };
	  
   .. raw:: html
   
      <h2 id="button-design-4.x" class="anchor-fixed">Button design</h2>
	  
   The design of buttons displayed in the chat is defined at the project level. To change the buttons look:
   
   1. At the top of the code editor, click **Integrations**.
   2. Next to the **Text chat** option, click **Change**. 
   3. In the **Web/Text chat** view, scroll down to the **Buttons** section and adjust the buttons look as required. You can change the following settings:
   
      - **Font size**: specify the font size for chat buttons. The value must be between 10px and 22px.
      - **Top left order radius**, **Top right border radius**, **Bottom right border radius**, **Bottom left border radius**: set the border radius for the corners of chat buttons.
      - **Font color**: choose the font color for chat buttons.
      - **Background color**: choose the background color for chat buttons.
      - **Border color**: choose the border color for chat buttons.
      - **With shadow**: disable this option not to show shadow for chat buttons.
      - **Buttons alignment**: choose how chat buttons must be aligned in the compact and full screen modes: on the left, in the center or on the right.
	 
	 
   .. image:: /_static/assets/img/script-concepts/buttons-design-4.x.png

   
.. tabbed:: SLU 3.x

   To display buttons in the chat UI, use the ``showPopup()`` function in the script. 
   
   In the example below, when a new dialog session starts, the AI assistant displays a greeting with two buttons: ``Talk to sales`` and ``Just browsing``:

   .. code-block:: alan
      :caption: Dialog script

      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showPopup({
              html:`<div class="alan-chat-buttons"><div send-text="Talk to sales" class="alan-chat-button">Talk to sales</div><div send-text="Just browsing" class="alan-chat-button">Just browsing</div></div>`,
              style:`.alan-chat-buttons {width: 100%; text-align: right;} .alan-btn_text-chat-full-screen .alan-chat-buttons{text-align: left;} .alan-chat-button {display: inline-block; padding: 10px; background-color: #FFFFFF; color: #000; text-decoration: none; border: 1px solid #D4DDFF; border-radius: 10px; cursor: pointer; margin: 3px; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:hover { cursor: pointer; border-color: #2757FF; color: #2757FF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:active { background-color: #E9EEFF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}`,     
              overlay: true,
              force: false,
              type: "chat",
          });
      });

      intent("Talk to sales", p => {
          p.play("Awesome, I just need to confirm some information first...");
      });

      intent("Just browsing", p => {
          p.play("What would you like me to do?");
      });
   
   .. image:: /_static/assets/img/script-concepts/buttons.png


   .. raw:: html
   
      <h2 id="buttons-params-3.x" class="anchor-fixed">Button parameters</h2>

   The ``showPopup()`` function takes the following parameters:

   +---------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | **Name**                  | **Type**      | **Description**                                                                                                                                                                                               |
   +===========================+===============+===============================================================================================================================================================================================================+
   | ``html``                  | HTML markup   | Contains the HTML markup of buttons.                                                                                                                                                                          |
   +---------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``css``                   | CSS markup    | Contains the styles of buttons.                                                                                                                                                                               |
   +---------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``force``                 | Boolean       | If ``showPopop()`` is used after the ``play()`` function, defines whether buttons must be displayed immediately (``true``) or after the text specified in the ``play()`` function has been played (``false``).|
   +---------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``type``                  | String        | Defines the type of AI assistant: ``chat``.                                                                                                                                                                   |
   +---------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``params``                | Object        | Contains an input object to be applied to handlebar templates used in button text labels. For details, see `Button text values <#button-text-values>`__ .                                                     |
   +---------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

   .. raw:: html
   
      <h2 id="buttons-actions-3.x" class="anchor-fixed">Button actions</h2>


   When a button is clicked, the AI assistant can perform one of the following actions: 

   - `Invoke an intent <#buttons-intents-3.x>`__
   - `Call a project API method <#buttons-projectapi-3.x>`__
   
   .. raw:: html
   
      <h3 id="buttons-intents-3.x" class="anchor-fixed">Intents</h3>
	  
   On button click, you can invoke an intent in the dialog script. To do this, you must add the ``sendText(\'Your text\')`` parameter to ``<div>`` block of the button. The text in the ``send-text`` parameter must match the pattern of the intent you want to invoke.
   
   In the example below, when the ``Talk to sales`` and ``Just browsing`` buttons are clicked, corresponding intents are invoked in the dialog script:

   .. code-block:: alan
      :caption: Dialog script

      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showPopup({
              html:`<div class="alan-chat-buttons"><div send-text="Talk to sales" class="alan-chat-button">Talk to sales</div><div send-text="Just browsing" class="alan-chat-button">Just browsing</div></div>`,
              style:`.alan-chat-buttons {width: 100%; text-align: right;} .alan-btn_text-chat-full-screen .alan-chat-buttons{text-align: left;} .alan-chat-button {display: inline-block; padding: 10px; background-color: #FFFFFF; color: #000; text-decoration: none; border: 1px solid #D4DDFF; border-radius: 10px; cursor: pointer; margin: 3px; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:hover { cursor: pointer; border-color: #2757FF; color: #2757FF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:active { background-color: #E9EEFF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}`,     
              overlay: true,
              force: false,
          });
      });

      intent("Talk to sales", p => {
          p.play("Awesome, I just need to confirm some information first...");
      });

      intent("Just browsing", p => {
          p.play("What would you like me to do?");
      });   
	  
   .. raw:: html
   
      <h3 id="buttons-projectapi-3.x" class="anchor-fixed">Project API</h3>
	  
   On button click, you can call a project API method in the dialog script. To do this, you must add the following parameters to the ``<div>`` block of the button:

   - ``call-project-api="methodName"``: in this parameter, define the name of the project API method you want to call
   - ``project-api-param=\'{"data":"Your data"}\'``: in this parameter, define the data you want to pass to the project API method
   
   In the example below, when the ``Contact support`` button is clicked, the ``contactSupport()`` project API method is called:

   .. code-block:: alan
      :caption: Dialog script
	  
      onCreateUser(p => {
          // Chat greeting
          const greetingImage = "https://storage.googleapis.com/alan-public-images/alan-webflow-website/alan-chat-logo.svg";
          const greetingTitle = "Hi, this is Alan, your AI assistant!";
          const greetingText = "You can talk to me, ask questions and perform tasks with text commands. For example, you can ask: \n - What pricing plans are available? \n - How do I contact Sales? \n - Where can I find Alan docs?";
          const image = `<img style="display: block;margin-bottom: 20px; height:75px" src="${greetingImage}"/>`;
          const title = `<div style="margin-bottom: 10px;font-weight: 700;font-size: 20px;">${greetingTitle}</div>`;
          p.play(`${image}${title}${greetingText}`, opts({ force: true, markdown: true, audio: false, greeting: true}));

          // Chat buttons
          p.showPopup({
              html:`<div class="alan-chat-buttons"><div class="alan-chat-button" call-project-api="contactSupport" project-api-param=\'{"data":"Your data"}\'>Contact support</div><div send-text="Just browsing" class="alan-chat-button">Just browsing</div></div>`,
              style:`.alan-chat-buttons {width: 100%; text-align: right;} .alan-btn_text-chat-full-screen .alan-chat-buttons{text-align: left;} .alan-chat-button {display: inline-block; padding: 10px; background-color: #FFFFFF; color: #000; text-decoration: none; border: 1px solid #D4DDFF; border-radius: 10px; cursor: pointer; margin: 3px; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:hover { cursor: pointer; border-color: #2757FF; color: #2757FF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:active { background-color: #E9EEFF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}`,
              overlay: true,
              force: false,
              type: "chat",
          });
      });

      projectAPI.contactSupport = function(p, param, callback) {
          p.play("Please provide a detailed description of the problem you have encountered...");
          p.userData.data = param.data;
          console.log(p.userData.data);
          callback();
      };

      intent("Just browsing", p => {
          p.play("What would you like me to do?");
      });
    

   .. raw:: html
   
      <h2 id="buttons-text-values" class="anchor-fixed">Button text values</h2>

   To set a value for the button text label, you can use `handlebar templates syntax <https://handlebarsjs.com/>`__. Handlebar expressions added to the button text allow you to customize and personalize the button appearance and content.

   To use handlebars with buttons, define an input object in the ``params`` parameter of the button code. After that, you can add handlebar expressions in double curly braces ``{{...}}`` to the button text.

   In the example below, when the user says: ``Schedule a meeting with sales``, the AI assistant displays three time slot options defined in the ``myParams`` object:

   .. code-block:: alan
      :caption: Dialog script
   
      let timeSlots = {slot01: "10:00 AM", slot02: "11:00 AM", slot03: "12:00 PM"}

      intent("Schedule a meeting with sales", p => {
          p.play("Sure! When would you like to meet?");
          p.showPopup({
              html:`<div class="alan-chat-buttons"><div call-project-api="scheduleMeeting" project-api-param=\'{"time":"${timeSlots.slot01}"}\' class="alan-chat-button">{{slot01}}</div><div call-project-api="scheduleMeeting" project-api-param=\'{"time":"${timeSlots.slot02}"}\' class="alan-chat-button">{{slot02}}</div><div call-project-api="scheduleMeeting" project-api-param=\'{"time":"${timeSlots.slot03}"}\' class="alan-chat-button">{{slot03}}</div></div>`,
              style:`.alan-chat-buttons {width: 100%; text-align: right;} .alan-btn_text-chat-full-screen .alan-chat-buttons{text-align: left;} .alan-chat-button {display: inline-block; padding: 10px; background-color: #FFFFFF; color: #000; text-decoration: none; border: 1px solid #D4DDFF; border-radius: 10px; cursor: pointer; margin: 3px; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:hover { cursor: pointer; border-color: #2757FF; color: #2757FF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}  .alan-chat-button:active { background-color: #E9EEFF; transition: color 300ms ease-in-out, border-color 300ms ease-in-out, background-color 300ms ease-in-out;}`,
              force: false,
              type: "chat",
              params: timeSlots
          });
      });

      projectAPI.scheduleMeeting = function(p, param, callback) {
          p.userData.time = param.time;
          p.play(`Thanks! Let's meet at ${p.userData.time}`);
          console.log(`Option selected: ${p.userData.time}`);
          callback();
      };

   .. image:: /_static/assets/img/script-concepts/buttons-handlebars.png

   .. raw:: html
   
      <h2 id="popup-editor" class="anchor-fixed">Popup editor</h2>

   .. include:: snippets/popup-editor.rst

.. raw:: html

   <div id="green-background"></div>
   

