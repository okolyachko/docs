JavaScript
==========

.. raw:: html
   
   <a href="https://www.npmjs.com/package/@alan-ai/alan-sdk-web">
   <img src="https://img.shields.io/npm/v/@alan-ai/alan-sdk-web.svg" align="left" style="border:inherit; padding-right:10px" /></a>

   <a href="https://github.com/alan-ai/alan-sdk-web/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-web" align="left" style="border:inherit"/></a>
   
   <br/>

You can integrate a simple HTML page with Alan using JavaScript without any frameworks.

Integrating with Alan AI
------------------------

You can add the Alan AI button to your page in two ways:

- With the npm package 
- In the browser library mode 

.. tabbed:: NPM package

   1. In the Terminal, run the command:

      .. code-block:: 
         :caption: Terminal

         npm install @alan-ai/alan-sdk-web --save

   2. Add a ``<div>`` for appending the Alan button:

      .. code-block:: html
         :caption: Client app

         <div class="alan-btn"></div>

   3. Import the ``alanBtn`` function from the ``@alan-ai/alan-sdk-web`` package and add the Alan button to the page:

      .. code-block:: typescript
         :caption: Client app

         import alanBtn from "@alan-ai/alan-sdk-web";

         var alanBtnInstance = alanBtn({
           key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
           onCommand: function (commandData) {
             if (commandData.command === "go:back") {
               // Call the client code that will react to the received command
             }
           },
           rootEl: document.getElementById("alan-btn"),
         });
		 
   4. (For Alan AI Web Chat) Add a link to the font to the ``<head>`` section of the HTML page:
   
      .. code-block:: html
         :caption: Client app

         <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

.. tabbed:: Browser library mode
   
   1. Add the ``<script>`` tag to the page:

      .. code-block:: html
         :caption: Client app

         <script type="text/javascript" src="https://studio.alan.app/web/lib/alan_lib.min.js"></script>  
   
   2. Add a ``<div>`` for appending the Alan button:

      .. code-block:: html
         :caption: Client app

         <div class="alan-btn"></div>

   3. Add the Alan AI button in the ``<script>`` tag like this:

      .. code-block:: html
         :caption: Client app

         <script>
           var alanBtnInstance = alanBtn({
             key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
             onCommand: function (commandData) {
               if (commandData.command === "go:back") {
                 // Call the client code that will react to the received command
               }
             },
             rootEl: document.getElementById("alan-btn"),
           });
         </script>
		 
   4. (For Alan AI Web Chat) Add a link to the font to the ``<head>`` section of the HTML page:
   
      .. code-block:: html
         :caption: Client app

         <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

.. note::
	  
   Mind the following:
   
   - Regularly update the ``@alan-ai/alan-sdk-web`` package your project depends on. To check if a newer version is available, run ``npm outdated``. To update the alan package, run ``npm update @alan-ai/alan-sdk-web``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.
   
   - If you add the Alan button to a multi-page app or website, the Alan button will be reloaded on every redirect or page refresh. To store and access the data required for the dialog session, use the `localStorage <https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage>`__ and `sessionStorage <https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage>`__ objects. Alternatively, you can design your project as a single-page app.
   
.. _Alan button parameters:
   
Specifying the Alan AI button parameters
----------------------------------------

.. include:: ../snippets/button-parameters-web.rst

Changing the Alan AI button position
------------------------------------

.. include:: ../snippets/button-position-web.rst

Using client API methods
------------------------

You can use the following :doc:`client API methods <../methods/common-api>` in your page or app:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `sendText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_
-  `remove()`_
-  `textChat.isAudioOutputEnabled()`_
-  `textChat.setAudioOutputEnabled()`_

setVisualState()
~~~~~~~~~~~~~~~~

Use the ``setVisualState()`` method to inform the AI assistant about the appâ€™s visual context. For details, see :ref:`setVisualState() <setVisualState()>`.

.. include:: ../snippets/visual-state-web.rst
   
callProjectApi()
~~~~~~~~~~~~~~~~

Use the ``callProjectApi()`` method to send data from the client app to the dialog script and trigger activities without voice and text commands. For details, see :ref:`callProjectApi() <callProjectApi()>`.

.. code-block:: alan
   :caption: Dialog script

   projectAPI.setClientData = function(p, param, callback) {
     console.log(param);
   };

.. include:: ../snippets/project-api-web.rst
   
playText()
~~~~~~~~~~

Use the ``playText()`` method to play specific text in the client app. For details, see :ref:`playText() <playText()>`.

.. include:: ../snippets/playtext-web.rst


sendText()
~~~~~~~~~~

Use the ``sendText()`` method to send a text message to Alan AI as the user's input. For details, see :ref:`sendText() <sendText()>`.

.. include:: ../snippets/sendtext-web.rst
   
playCommand()
~~~~~~~~~~~~~

Use the ``playCommand()`` method to execute a specific command in the client app. For details, see :ref:`playCommand() <playCommand()>`.

.. include:: ../snippets/playcommand-web.rst
   
   
activate()
~~~~~~~~~~

Use the ``activate()`` method to activate the Alan AI button programmatically. For details, see :ref:`activate() <activate()>`.

.. include:: ../snippets/activate-web.rst
   
deactivate()
~~~~~~~~~~~~

Use the ``deactivate()`` method to deactivate the Alan AI button programmatically. For details, see :ref:`deactivate() <deactivate()>`.

.. include:: ../snippets/deactivate-web.rst
   
isActive()
~~~~~~~~~~

Use the ``isActive()`` method to check the Alan AI button state: active or not. For details, see :ref:`isActive() <isActive()>`.

.. include:: ../snippets/isactive-web.rst
   
   
remove()
~~~~~~~~

Use the ``remove()`` method to remove the Alan AI button from the parent element. For details, see :ref:`remove() <remove()>`.

.. include:: ../snippets/remove-web.rst


textChat.isAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.isAudioOutputEnabled()`` method to get the state of audio output for the Alan AI Chat. For details, see :ref:`textChat.isAudioOutputEnabled() <textChat.isAudioOutputEnabled()>`.

.. include:: ../snippets/get-audio-web.rst

textChat.setAudioOutputEnabled()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``textChat.setAudioOutputEnabled()`` method to enable or disable audio output for the Alan AI Chat. For details, see :ref:`textChat.setAudioOutputEnabled() <textChat.setAudioOutputEnabled()>`.

.. include:: ../snippets/set-audio-web.rst


Using handlers
--------------

You can use the following :doc:`Alan AI handlers <../methods/handlers>` in your page or app:

-  `onCommand handler`_
-  `onButtonState handler`_
-  `onConnectionStatus handler`_
-  `onEvent handler`_

onCommand handler
~~~~~~~~~~~~~~~~~

Use the ``onCommand`` handler to :ref:`handle commands sent from the dialog script <Sending commands to the app>`. For details, see :doc:`onCommand handler <../methods/command-handler>`.

.. include:: ../snippets/command-handler-web.rst

onButtonState handler
~~~~~~~~~~~~~~~~~~~~~

Use the ``onButtonState`` handler to capture and handle the Alan AI button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

.. include:: ../snippets/state-handler-web.rst

onConnectionStatus handler
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``onConnectionStatus`` handler to capture and handle the connection status for the virtual assistant project. For details, see :doc:`onConnectionStatus handler <../methods/connection-handler>`.

.. include:: ../snippets/connection-handler-web.rst

onEvent handler
~~~~~~~~~~~~~~~

Use the ``onEvent`` handler to capture and handle events emitted by Alan AI: get user's utterances, assistant responses and so on. For details, see :doc:`onEvent handler <../methods/event-handler>`.

.. include:: ../snippets/event-handler-web.rst


What's next?
------------

.. panels::
   :column: col-lg-12 col-md-12 col-sm-12 col-xs-12 p-2
   
   ---
   :card: border-0 + custom-style-blue
   
   .. image:: /_static/assets/img/about/git-purple.svg
   
   .. raw:: html
	 
	  <p style="font-size: 20px; font-weight: 700;">Example apps</p>
	  <p>Find and explore examples of voice-enabled apps on the <a href="https://github.com/alan-ai" target="_blank">Alan AI GitHub repository.</p>
	  
   .. link-button:: https://github.com/alan-ai/alan-sdk-web/tree/master/examples/
        :type: url
        :text: View on GitHub
        :classes: btn-outline-primary
   
   
.. raw:: html

   <div id="purple-background"></div>
